/**
 * 泛型函数，内容要点：
 * 1. 定义语法：<T>(value: T) => T
 * 2. 关键字：<>, T
 * 3. 泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样
 * 4. 可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以
 * 5. 还可以使用带有调用签名的对象字面量来定义泛型函数
 */

// 声明泛型函数
function identity2<T>(arg: T): T {
    return arg
}

// 泛型函数的类型，有一个类型参数 <T> 在函数签名最前面
let myIdentity: <T>(arg: T) => T = identity2


// 可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以
let myIdentity2: <R>(arg: R) => R = identity2

// 还可以使用带有调用签名的对象字面量来定义泛型函数
let myIdentity3: { <T>(arg: T): T } = identity2
