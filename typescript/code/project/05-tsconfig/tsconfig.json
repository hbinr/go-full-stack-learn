{
  "compilerOptions": {
      // "incremental": true,                // 增量编译,编译器在第一次编译后,生成一个可以存储编译信息的文件,
                                             // 然后在二次编译的时候,会根据这个文件增量编译,提高编译速度
      // "tsBuildInfoFile": "./buildFile",   // 增量编译文件的存储位置
      // "diagnostics": true,                // 打印诊断信息,在控制台输出编译信息

      // "target": "es5",           // 目标语言的版本
      // "module": "commonjs",      // 生成代码的模块标准
      // "outFile": "./app.js",     // 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中

      // "lib": [],                 // TS 需要引用的库，即声明文件，es5 默认 "dom", "es5", "scripthost"
                                    // 如果需要更高版本的es,则可以导入: lib: ["es2019"]
      // "allowJs": true,           // 允许编译 JS 文件（js、jsx）
      // "checkJs": true,           // 允许在 JS 文件中报错，通常与 allowJS 一起使用
      // "outDir": "./out",         // 指定输出目录,所有编译后的文件都会放在 /out 下
      // "rootDir": "./",           // 指定输入文件目录（用于控制输出目录的结构）
      
      
      // 声明文件相关 
      // "declaration": true,         // 生成声明文件, true 编译后会生成一个声明文件,如: index.d.ts
      // "declarationDir": "./d",     // 声明文件的路径
      // "emitDeclarationOnly": true, // 只生成声明文件, 不会生成js文件
      // "sourceMap": true,           // 生成目标文件的 sourceMap, .map后缀文件
      // "inlineSourceMap": true,     // 生成目标文件的 inline sourceMap
      // "declarationMap": true,      // 生成声明文件的 sourceMap
      // "typeRoots": [],             // 声明文件目录，默认 node_modules/@types,编译时会被包含进来
                                      // 如果指定了 typeRoots，则只有 typeRoots 路径下的包才会被包含进来,不包含 ./node_modules/@types 里面的包。
      // "types": [],                 // 声明文件包,只有被列出来的包才会被包含进来
                                      // 设置为空数组，则禁止自动引入 @types 包  

      // "removeComments": true,    // 删除注释

      // "noEmit": true,            // 不输出文件
      // "noEmitOnError": true,     // 发生错误时不输出文件

      // "noEmitHelpers": true,     // 不生成 helper 函数(和工程中类继承的代码有关),减少编译后的代码体积
                                    // 如果开启了，需额外安装 ts-helpers
      // "importHelpers": true,     // 通过 tslib 引入 helper 函数(ts内置)，文件必须是模块(有export即可). 开启后不需要再安装 ts-helpers了

      // "downlevelIteration": true,    // 降级遍历器的实现（es3/5）

      // 类型检查相关
      // "strict": true,                        // 开启所有严格的类型检查
      // "alwaysStrict": false,                 // 在代码中注入 "use strict";
      // "noImplicitAny": false,                // 不允许隐式的 any 类型
      // "strictNullChecks": false,             // 不允许把 null、undefined 赋值给其他类型变量
      // "strictFunctionTypes": false           // 不允许函数参数双向协变
      // "strictPropertyInitialization": false, // 类的实例属性必须初始化
      // "strictBindCallApply": false,          // 严格的 bind/call/apply 检查
      // "noImplicitThis": false,               // 不允许 this 有隐式的 any 类型

      // 函数相关
      // "noUnusedLocals": true,                // 检查只声明，未使用的局部变量
      // "noUnusedParameters": true,            // 检查未使用的函数参数
      // "noFallthroughCasesInSwitch": true,    // 防止 switch 语句贯穿
                                                // switch 语句贯穿: 某个分支没有break,那么该分支以下的分支就都会执行
      // "noImplicitReturns": true,             // 每个分支都要有返回值 eg: if/else 这两个分支也必须有返回值

      // "esModuleInterop": true,               // 允许 export = 导出;
                                                // 开启后,既可以允许import from 导入,也允许 import = 导入
      // "allowUmdGlobalAccess": true,          // 允许在模块中访问 UMD 全局变量
      // "moduleResolution": "node",            // 模块解析策略, 默认使用node的解析策略
                                                // classic: 用于 amd/system/es2015 
      // "baseUrl": "./",                       // 解析非相对模块的基地址
      // "paths": {                             // 路径映射，相对于 baseUrl
      //   "jquery": ["node_modules/jquery/dist/jquery.slim.min.js"]
      // },
      // "rootDirs": ["src", "out"],            // 将多个目录放在一个虚拟目录下，用于运行时

      // "listEmittedFiles": true,        // 打印输出的文件,控制台输出包含绝对路径的文件
      // "listFiles": true,               // 打印编译的文件（包括引用的声明文件）,控制台输出包含绝对路径的文件
  }
}
