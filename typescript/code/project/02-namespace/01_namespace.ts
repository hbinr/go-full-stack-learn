/**
 * 命名空间学习，内容要点:
 * 1. 命名空间同样是为了避免变量命名冲突，变量污染问题。
 *    TypeScript 官方将命名空间视为“内部模块”，模块则被视为“外部模块”。
 * 2. 命名空间本质上就是一个对象，将其内部的变量组织到这个对象的属性上
 * 3. 命名空间主要是为解决全局作用域内重名问题，而这一问题随着模块化编程的使用，已经得到了解决
 *      如果全是模块化开发的项目，那么可以不使用命名空间
 *      但是如果使用了全局的类库，命名空间仍然是一个比较好的解决方案，主要看项目技术使用
 * 4. 使用原则：
 *      a. 命名空间和模块不用混用
 *      b. 不要在一个模块中使用命名空间
 *      c. 命名空间最好在一个全局的环境中使用
 * 5. 我们可以在命名空间内定义任意个变量，但是只在命名空间下可见，
 *    如果想让命名空间的成员在全局内可用的话，就通过export导出
 * 6. 命名空间如果越来越大，是可以拆分的，只要命名空间的名称相同，它们之间是共享命名空间的
 * 7. 为了方便函数调用，我们可以给命名空间的成员起别名
 *      注意不要和模块中的import混淆，这里只是起别名，eg: import circle = Shape.circle
 *
 */